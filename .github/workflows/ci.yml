name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.9'

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libmagic1 ffmpeg

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Run security checks with bandit
      run: |
        bandit -r src/ -f json -o security-report.json || true
        bandit -r src/ --severity-level medium

    - name: Run code quality checks with flake8
      run: |
        flake8 src/ tests/ --max-line-length=120 --extend-ignore=E203,W503

    - name: Run type checking with mypy
      run: |
        mypy src/ --ignore-missing-imports

    - name: Run unit tests with coverage
      env:
        DB_PATH: ':memory:'
        WHISPER_MODEL: 'tiny'
      run: |
        pytest tests/unit/ tests/security/ -v --cov=src --cov-report=xml --cov-report=html --cov-fail-under=80

    - name: Run integration tests
      env:
        DB_PATH: ':memory:'
        WHISPER_MODEL: 'tiny'
      run: |
        pytest tests/integration/ -v --tb=short

    - name: Run API tests
      env:
        DB_PATH: ':memory:'
        WHISPER_MODEL: 'tiny'
      run: |
        pytest tests/api/ -v --tb=short

    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.9'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

    - name: Archive test artifacts
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: test-artifacts-${{ matrix.python-version }}
        path: |
          htmlcov/
          security-report.json
          pytest.log

  performance-test:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libmagic1 ffmpeg
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Run performance tests
      env:
        DB_PATH: ':memory:'
        WHISPER_MODEL: 'tiny'
      run: |
        pytest tests/performance/ -v --tb=short

    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: performance-results.json

  security-scan:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Run safety check for vulnerabilities
      run: |
        safety check --json --output safety-report.json || true
        safety check

    - name: Run comprehensive security scan
      run: |
        bandit -r src/ -f json -o bandit-report.json
        bandit -r src/ --severity-level low

    - name: Upload security artifacts
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          safety-report.json
          bandit-report.json

  lint-and-format:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt

    - name: Check code formatting with black
      run: |
        black --check --diff src/ tests/

    - name: Check import sorting with isort
      run: |
        isort --check-only --diff src/ tests/

    - name: Run pylint
      run: |
        pylint src/ --output-format=json > pylint-report.json || true
        pylint src/ --fail-under=8.0

  build-and-test-api:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libmagic1 ffmpeg
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Start API server
      run: |
        python main.py &
        sleep 10
      env:
        DB_PATH: 'data/test_transcriptions.db'

    - name: Test API health
      run: |
        curl -f http://localhost:8000/health || exit 1

    - name: Run API integration tests
      run: |
        pip install -r requirements-dev.txt
        pytest tests/api/ -v --tb=short
      env:
        API_BASE_URL: 'http://localhost:8000'
        DB_PATH: 'data/test_transcriptions.db'

  quality-gate:
    runs-on: ubuntu-latest
    needs: [test, security-scan, lint-and-format]
    if: always()

    steps:
    - name: Check test results
      run: |
        if [[ "${{ needs.test.result }}" != "success" ]]; then
          echo "Tests failed"
          exit 1
        fi

    - name: Check security scan results
      run: |
        if [[ "${{ needs.security-scan.result }}" != "success" ]]; then
          echo "Security scan failed"
          exit 1
        fi

    - name: Check lint results
      run: |
        if [[ "${{ needs.lint-and-format.result }}" != "success" ]]; then
          echo "Linting failed"
          exit 1
        fi

    - name: Quality gate passed
      run: |
        echo "All quality checks passed! âœ…"